extends ../layout/index.pug

block append stylesheets
  link(rel='stylesheet' href='/mass-message/index.css')

block content
  section.hero.is-fullheight.is-dark
    .hero-head
      .container
        nav.nav
          .container
            .nav-left
              a.nav-item.branding(href='../index.html')
                img(src='https://scontent.fcgh12-1.fna.fbcdn.net/v/t1.0-9/18485498_463912997289183_6766375779007506020_n.png?oh=d70fe6affd9b823f09c64546fb253f44&oe=59CCAF85' alt='Beta logo')
                .brand-name BETA
            span.nav-toggle
              span
              span
              span
            .nav-right.nav-menu
              a.nav-item.is-active Mensagem em massa
    .hero-body
      .container
        form#mass-message(
          v-on:submit='onSubmit($event)'
        )
          .columns
            .column.is-12
              h1.title.is-2.is-spaced
                | Envio de mensagem em massa
              h2.subtitle.is-5
                | Você pode enviar uma mensagem em massa para todas as pessoas que interagiram
                | com a BETA pelo Messenger do Facebook.

          .columns
            .column.is-6
              .field
                label.label Páginas
                .notification.is-warning(v-if='!bots.length')
                  b Nenhum usuário interagiu com a BETA até o momento.
                  |  Infelizmente não é possível enviar mensagem em massa.
                .users-container(v-else)
                  table.table.is-striped.is-medium
                    thead
                      tr
                        th(style='width: 1px')
                          label.checkbox
                            input(type='checkbox' v-model='selectAllBots')
                        th(style='width: 1px') #
                        th Nome
                        th Criado em
                    tbody
                      tr(v-for='bot in bots')
                        th
                          label.checkbox
                            input(
                              type='checkbox'
                              v-bind:name="'selected_bots[' + bot.id + '][]'"
                              v-bind:value='bot.id'
                              v-model='selectedBots'
                              v-on:change='onChangeSelectedBots'
                            )
                        td {{ bot.id }}
                        td {{ bot.data.name }}
                        td {{ bot.createdAt }}
              .field
                label.label Mensagem
                p.control
                  textarea.textarea(
                    autofocus
                    v-model='message'
                    v-bind:class="{ 'is-danger': !message && messageDirty, 'is-success': message }"
                    v-on:keydown='onMessageKeydown'
                    name='message'
                    placeholder='Exemplo:\n\nE aí, mana, tudo bem? Meu nome é Betânia, mas pode me chamar de Beta. Sou uma robô que veio ao mundo para ajudar a viralizar as lutas feministas pelas redes - e já tem uma oportunidade no forno. Vamos lá?'
                    style='min-height: 220px'
                  )
                span.help.is-danger(v-if='!message && messageDirty') * Campo obrigatório

              button.button.is-outlined.is-large.is-primary.is-inverted.is-fullwidth(
                type='submit'
              )
                span.icon
                  i.fa.fa-envelope
                | Enviar

            .column.is-6
              .field
                label.label Usuários ({{ selectedRecipients.length }})
                .notification.is-warning(v-if='!bots.length && !recipients.length')
                  b Nenhum usuário interagiu com a BETA até o momento.
                  |  Infelizmente não é possível enviar mensagem em massa.
                .notification.is-warning(v-if='!recipients.length')
                  b Nenhuma página foi selecionada.
                  |  Pra poder enviar mensagem para os usuários, você precisa
                  |  selecionar uma ou mais páginas para que seja possível a listagem
                  |  dos usuários.
                .users-container(v-else='recipients.length')
                  table.table.is-striped
                    thead
                      tr
                        th(style='width: 1px')
                          label.checkbox
                            input(type='checkbox' v-model='selectAllRecipients')
                        th Nome
                        th Página
                        th Última Interação
                    tfoot
                      tr
                        th(style='width: 1px')
                          label.checkbox
                            input(type='checkbox' v-model='selectAllRecipients')
                        th Nome
                        th Página
                        th Última Interação
                    tbody
                      tr(v-for='recipient in recipients')
                        th
                          label.checkbox
                            input(
                              type='checkbox'
                              v-bind:name="'selected_recipients[' + recipient.facebookBotConfigurationId + '][]'"
                              v-bind:value='{ facebookBotConfigurationId: recipient.facebookBotConfigurationId, fbContextRecipientId: recipient.fbContextRecipientId }'
                              v-model='selectedRecipients'
                              v-on:change='onRecipientChange'
                              checked
                            )
                        td {{ recipient.profile.first_name }} {{ recipient.profile.last_name }}
                        td {{ recipient.bot.name }}
                        td {{ recipient.createdAt }}
                span.help.is-danger(v-if='(!recipients.length || !selectedRecipients.length) && recipientDirty')
                  | * Campo obrigatório

  script(type='text/javascript').
    var appDomain = '#{appDomain}'

    new Vue({
      el: '#mass-message',
      data: {
        bots: !{JSON.stringify(bots)},
        allRecipients: !{JSON.stringify(recipients)},
        message: undefined,
        messageDirty: false,
        recipientError: false,
        selectedBots: !{JSON.stringify(bots)}.map(b => b.id),
        selectedRecipients: !{JSON.stringify(recipients)}
          .map(r => ({
            facebookBotConfigurationId: r.facebookBotConfigurationId,
            fbContextRecipientId: r.fbContextRecipientId
          })),
      },
      computed: {
        recipients: {
          get: function() {
            return this.allRecipients.filter(
              r => this.selectedBots.includes(r.facebookBotConfigurationId)
            )
          }
        },
        selectAllBots: {
          get: function () {
            return this.bots
              ? this.selectedBots.length == this.bots.length
              : false
          },
          set: function (value) {
            var selected = []
            if (value) this.bots.forEach(function (b) { selected.push(b.id) })
            this.selectedBots = selected
            this.selectedRecipients = this.allRecipients
              .filter(r => selected.includes(r.facebookBotConfigurationId))
              .map(r => ({
                facebookBotConfigurationId: r.facebookBotConfigurationId,
                fbContextRecipientId: r.fbContextRecipientId
              }))
          }
        },
        selectAllRecipients: {
          get: function () {
            return this.recipients
              ? this.selectedRecipients.length == this.recipients.length
              : false
          },
          set: function (value) {
            var selected = []
            if (value) {
              this.recipients.forEach(function (r) {
                selected.push({
                  facebookBotConfigurationId: r.facebookBotConfigurationId,
                  fbContextRecipientId: r.fbContextRecipientId
                })
              })
            }
            this.selectedRecipients = selected
          }
        }
      },
      methods: {
        onMessageKeydown: function () { this.messageDirty = true },
        onRecipientChange: function() { this.recipientDirty = true },
        onSubmit: function(event) {
          event.preventDefault()
          var validation = this.message && this.selectedRecipients.length
          var message = 'Dá uma olhada pra ver se tá tudo certo na mensagem pois,'
                      + 'depois de enviada, não tem que voltar atrás... Posso prosseguir?'

          if (!validation) {
            this.messageDirty = true
            this.recipientDirty = true
            return
          }
          if (confirm(message)) {
            var endpoint = appDomain + '/mass-message/send'
            var payload = {
              selectedRecipients: this.selectedRecipients,
              message: this.message
            }

            this.$http.post(endpoint, payload)
              .then(data => data)
              .catch(err => console.error(err))
          }
        },
        onChangeSelectedBots: function() {
          this.selectedRecipients = this.allRecipients
            .filter(r => this.selectedBots.includes(r.facebookBotConfigurationId))
            .map(r => ({
              facebookBotConfigurationId: r.facebookBotConfigurationId,
              fbContextRecipientId: r.fbContextRecipientId
            }))
        }
      }
    })
